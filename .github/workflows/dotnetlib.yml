name: .NET

on:
  workflow_call:
    inputs:
        publishToNuget:
          description: 'Publish to nuget'
          required: true
          default: true
          type: boolean
        sourceDirectoryPath:
          description: 'Path for all source code'
          default: 'src'
          type: string
        runOnImageName:
          description: 'Image target name (ubuntu, windows, ...)'
          default: 'ubuntu'
          type: string
        runOnImageVersion:
          description: 'Image target version (latest, 20.04, ...)'
          default: 'latest'
          type: string
        dotnetVersions:
          description: 'Dotnet versions.'
          default: |
            7.0.x
            8.0.x
          type: string
    secrets:
        NUGETPACKAGEIDENTIFIER:
            required: true
        SONAR_ORGANIZATION_CODE:
            required: true
        SONAR_PROJECT_CODE:
            required: true
        SONAR_TOKEN:
            required: true
        NUGETAPIKEY:
            required: true

jobs:
  build:
    name: "CI : Build, Test and publish"
    runs-on: '${{ inputs.runOnImageName }}-${{ inputs.runOnImageVersion }}'

    steps:
    - name: Checkout workflows repo # required so we can reference the actions locally
      uses: actions/checkout@v2
    # Show informations :
    - name: Show github context github ref
      run: echo ${{ github.ref }}
    - name: Show github context github head_ref
      run: echo ${{ github.head_ref }}
    # Install java last version for Sonar
    - name: Set up JDK 17
      uses: actions/setup-java@v3
      with:
        java-version: 17
        distribution: 'zulu' # Alternative distribution options are available.
    - name: Cache SonarCloud packages
      uses: actions/cache@v3
      with:
        path: ~\sonar\cache
        key: ${{ runner.os }}-sonar
        restore-keys: ${{ runner.os }}-sonar
    - name: Cache SonarCloud scanner
      id: cache-sonar-scanner
      uses: actions/cache@v3
      with:
        path: .\.sonar\scanner
        key: ${{ runner.os }}-sonar-scanner
        restore-keys: ${{ runner.os }}-sonar-scanner
    - name: Setup .NET
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: ${{ inputs.dotnetVersions }}
    - name: Install SonarCloud scanner
      if: steps.cache-sonar-scanner.outputs.cache-hit != 'true'
      shell: pwsh
      run: |
        New-Item -Path .\.sonar\scanner -ItemType Directory
        dotnet tool update dotnet-sonarscanner --tool-path .\.sonar\scanner
    - name: Show github context github head_ref
      run: echo ${{ github.head_ref }}
    - name: Restore dependencies
      run: dotnet restore
      working-directory: ${{ inputs.sourceDirectoryPath }}
    - id: generateVersionStep
      uses: mathieumack/MyGithubActions/actions/nugetversion@main
      with:
        nugetPackageIdentifier: '${{ secrets.NUGETPACKAGEIDENTIFIER }}'
    # Build solution (and package nuget) 
    - name: Begin Sonar scan
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # Needed to get PR information, if any
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      run: |
        .\.sonar\scanner\dotnet-sonarscanner begin /k:"${{ secrets.SONAR_ORGANIZATION_CODE }}_${{ secrets.SONAR_PROJECT_CODE }}" /o:"${{ secrets.SONAR_ORGANIZATION_CODE }}" /d:sonar.token="${{ secrets.SONAR_TOKEN }}" /d:sonar.host.url="https://sonarcloud.io"
    - id: buildandanalyze
      uses: mathieumack/MyGithubActions/actions/buildandtestdotnet@main
      with:
        version: '${{ steps.generateVersionStep.outputs.buildVersion }}'
        prefix: '${{ steps.generateVersionStep.outputs.buildVersionPrefix }}'
        workingDirectory: '${{ inputs.sourceDirectoryPath }}'
    #- name: End Sonar scan
    - name: End Sonar scan
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # Needed to get PR information, if any
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      run: |
        .\.sonar\scanner\dotnet-sonarscanner end /d:sonar.token="${{ secrets.SONAR_TOKEN }}"
    - uses: actions/upload-artifact@v3
      with:
        name: nuget-artifact
        path: src/**/*.nupkg
    # Publish a new version only for new features :
    - name: Push Package to NuGet.org
      if: startswith(github.ref,'refs/heads/feature') || startswith(github.head_ref,'feature/') || inputs.publishToNuget
      run: dotnet nuget push **.nupkg -k ${{ secrets.NUGETAPIKEY }} -s https://api.nuget.org/v3/index.json
      working-directory: ${{ inputs.sourceDirectoryPath }}
