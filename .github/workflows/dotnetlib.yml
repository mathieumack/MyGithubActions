name: .NET

on:
  workflow_call:
    inputs:
        publishToNuget:
          description: 'Publish to nuget'
          required: true
          default: true
          type: boolean
        sourceDirectoryPath:
          description: 'Path for all source code'
          default: 'src'
          type: string
        runOnImageName:
          description: 'Image target name (ubuntu, windows, ...)'
          default: 'ubuntu'
          type: string
        runOnImageVersion:
          description: 'Image target version (latest, 20.04, ...)'
          default: 'latest'
          type: string
        dotnet-version:
          description: 'Dotnet versions.'
          default: |
            7.0.x
            8.0.x
            9.0.x
          type: string
    secrets:
        NUGETPACKAGEIDENTIFIER:
            required: true
        SONAR_ORGANIZATION_CODE:
            required: true
        SONAR_PROJECT_CODE:
            required: true
        SONAR_TOKEN:
            required: true
        NUGETAPIKEY:
            required: true

jobs:
  build:
    name: "CI : Build, Test and publish"
    runs-on: '${{ inputs.runOnImageName }}-${{ inputs.runOnImageVersion }}'

    steps:
    - name: Checkout workflows repo # required so we can reference the actions locally
      uses: actions/checkout@v4
    # Show informations :
    - name: Show github context github ref
      run: echo ${{ github.ref }}
    - name: Show github context github head_ref
      run: echo ${{ github.head_ref }}
    # Install java last version for Sonar
    - name: Set up JDK 17
      uses: actions/setup-java@v3
      with:
        java-version: 17
        distribution: 'zulu' # Alternative distribution options are available.
    - name: Setup .NET
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: ${{ inputs.dotnet-version }}
    - name: Restore dependencies
      shell: pwsh
      run: dotnet restore
      working-directory: ${{ inputs.sourceDirectoryPath }}
    - name: Show github context github head_ref
      run: echo ${{ github.head_ref }}
    - name: Generate build version
      id: generate-version
      uses: mathieumack/MyGithubActions/actions/nugetversion@main
      with:
        nugetPackageIdentifier: '${{ secrets.NUGETPACKAGEIDENTIFIER }}'
    # Build solution (and package nuget) 
    - name: Sonar and other tools
      run: |
        dotnet tool install --global dotnet-sonarscanner
        dotnet tool install --global dotnet-project-licenses
        dotnet sonarscanner begin /k:${{ secrets.SONAR_ORGANIZATION_CODE }}_${{ secrets.SONAR_PROJECT_CODE }} /o:${{ secrets.SONAR_ORGANIZATION_CODE }} /d:sonar.login=${{ secrets.SONAR_TOKEN }} /d:sonar.host.url=https://sonarcloud.io /d:sonar.cs.opencover.reportsPaths="sonarqubecoverage.opencover.xml"
      working-directory: ${{ inputs.sourceDirectoryPath }}
    - name: Build and test dotnet projects
      id: buildandanalyze
      uses: mathieumack/MyGithubActions/actions/buildandtestdotnet@main
      with:
        dotnet-version: ${{ inputs.dotnet-version }}
        version: '${{ steps.generate-version.outputs.buildversion }}'
        prefix: '${{ steps.generate-version.outputs.buildversionprefix }}'
        workingDirectory: '${{ inputs.sourceDirectoryPath }}'
    - name: End sonar and other tools
      run: |
        dotnet-project-licenses -i .
        dotnet sonarscanner end /d:sonar.login=${{ secrets.SONAR_TOKEN }}
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      working-directory: ${{ inputs.sourceDirectoryPath }}
    - uses: actions/upload-artifact@v3
      with:
        name: nuget-artifact
        path: src/**/*.nupkg
    # Publish a new version only for new features :
    - name: Push Package to NuGet.org
      if: startswith(github.ref,'refs/heads/feature') || startswith(github.head_ref,'feature/') || inputs.publishToNuget
      run: dotnet nuget push **.nupkg -k ${{ secrets.NUGETAPIKEY }} -s https://api.nuget.org/v3/index.json
      working-directory: ${{ inputs.sourceDirectoryPath }}
